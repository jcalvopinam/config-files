#!/usr/bin/env bash
# Functions

#----------------------------------------------------------------------------------
# Text formatting
#----------------------------------------------------------------------------------
BOLD="\e[1m"
RESET="\e[0m"

#----------------------------------------------------------------------------------
# Deletes file/folder with scrub utility. e.g.:rmk myFolder
#----------------------------------------------------------------------------------
function rmk() {
  scrub -p dod $1
  shred -zun 10 -v $1
}

#----------------------------------------------------------------------------------
# Gets the size of a file or total size of a directory. e.g.: fsize ~/Downloads
#----------------------------------------------------------------------------------
function fsize() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* ./*
  fi
}

#----------------------------------------------------------------------------------
# Gets the most useful info about dns. e.g: digga google.com
#----------------------------------------------------------------------------------
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

#----------------------------------------------------------------------------------
# Extract and open project with IntelliJ, currently this only supports "zip" files.
#                    The command uio means Unzip Intellij Open
# Keep in mind that the "idea" command must be enabled, if you aren't sure, please
# open IntelliJ and go to "Tools > Create Command-line Launcher..." and hit "OK"
# sample how to use: uio project-name.zip
# > uio demo.zip
#----------------------------------------------------------------------------------
if type idea &> /dev/null; then
  function uio() {
    project=$1
    filename=$(basename -- "$project")
    extension="${filename##*.}"
    filename="${filename%.*}"

    if [[ "$project" = "" ]]; then
      echo " ::Please enter the file name..."
    else
      if [[ ${extension} == "zip" ]]; then
        unzip -q $project
        echo " ::Checking the project structure ..."
        cd $filename
        if [[ -e pom.xml ]] || [[ -e build.gradle ]]; then
          echo " ::Opening the project" $filename
          cd ..
          idea $filename &
          sleep 5
          echo " "
        else
          cd ..
          rm -rf $filename
          echo " ::The structure of the project is not maven nor gradle"
        fi
      else
        echo " :: Extension file doesn't support...."
      fi
    fi
  }
fi

#----------------------------------------------------------------------------------
# `man` colors
#----------------------------------------------------------------------------------
function man() {
  env \
    LESS_TERMCAP_mb=$'\e[01;31m' \
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    man "$@"
}

#----------------------------------------------------------------------------------
# Clean duplicated entries in the history
#----------------------------------------------------------------------------------
if [[ "$SHELL" = "/bin/zsh" ]]; then
  function czsh() {
    cd $HOME
    cat -n .zsh_history | sort -t ';' -uk2 | sort -nk1 | cut -f2- > .zsh_clean_history

    set +o nomatch
    rm -rf .zsh_history .zcompdump* .zsh_sessions
    mv .zsh_clean_history .zsh_history
    rm -rf .viminfo
    set -o nomatch

    if [[ "$1" = "f" ]]; then
      echo "Please wait until the execution has been released"
      find / -type f -name ".DS_Store" -exec rm -rf {} \; 2> /dev/null
      echo "...done!"
    fi

    # sort by commands
    if [[ "$1" = "s" ]]; then
      sort -t ';' -k2 ".zsh_history" > ".zsh_history.temp"
      mv ".zsh_history.temp" ".zsh_history"
    fi

    cd -
  }
fi

#----------------------------------------------------------------------------------
# `brew` Uninstall a formula
#----------------------------------------------------------------------------------
if type brew &> /dev/null; then
  function unbrew() {
    brew uninstall --force $1 # It deletes the package, data and configuration
    brew cleanup $1
    brew autoremove --dry-run
    brew cleanup
    brew doctor
    rm -rf ~/Library/Caches/Homebrew/downloads
  }
fi

#----------------------------------------------------------------------------------
# `brew` Force update/upgrade formulas and casks
#----------------------------------------------------------------------------------
if type brew &> /dev/null; then
  function upbrew() {
    brew_update=$(brew update --quiet 2>&1)
    formulas_outdated=$(brew outdated --formula --quiet)
    casks_outdated=$(brew outdated --cask --quiet)

    if [[ -z "$formulas_outdated" && -z "$casks_outdated" ]]; then
      echo "$brew_update"
    else
      echo -e "${BOLD}:: Available updates!${RESET}"

      [ -n "$formulas_outdated" ] && echo "${BOLD}==> Formulas:${RESET}\n$formulas_outdated"
      [ -n "$casks_outdated" ] && echo "${BOLD}\n==> Casks:${RESET}\n$casks_outdated"

      echo -ne "${BOLD}\n:: Do you want to update? (y/n): ${RESET}"
      read choice

      if [[ "$choice" =~ ^[Yy]$ ]]; then
        brew upgrade --formula $(brew list --formula)
        brew upgrade --cask $(brew list --cask)
        brew cleanup
        brew doctor
      else
        echo -e "${BOLD}:: Update canceled!${RESET}"
      fi
    fi
  }
fi

#----------------------------------------------------------------------------------
# `git` reset and clean current branch
#----------------------------------------------------------------------------------
function cbranch() {
  if ! git ls-files &> /dev/null; then
    echo $'Git project not found\n'
    return
  fi
  git reset --hard
  git clean -f -d
}

#----------------------------------------------------------------------------------
# `git` color setup for bash terminal
#----------------------------------------------------------------------------------
if [[ "$SHELL" = "/bin/bash" ]]; then
  parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
  }
fi

#----------------------------------------------------------------------------------
# `lnal` clean the files
#----------------------------------------------------------------------------------
if type lnav &> /dev/null; then
  function clnav() {
    rm -rf ~/.config/lnav/*.json
    rm -rf ~/.config/lnav/*.history
    rm -rf ~/.config/lnav/crash
  }
fi

#----------------------------------------------------------------------------------
# Gets the total memory consumed by app. e.g.: appname java
#----------------------------------------------------------------------------------
function appmem() {
  ps aux | grep -i "$1" | grep -v "grep" | awk '
  # Adds up the amount of memory used by each process.
  {sum+=$6}

  # At the end of the output, print the total amount in MB or GB
  END {
    # If the total amount is less than 1 GB, shows the amount in MB
    if (sum < 1048576) {
      size = sum / 1024;    # Divide by 1024 to convert to MB
      unit = "MB";          # Add MB text
    }
    # Otherwise, it shows the quantity in GB
    else {
      size = sum / 1048576; # Divide by 1048576 to convert to GB
      unit = "GB";          # Add GB text
    }
    # Print the amount rounded to 2 decimal places
    printf "%.2f %s", size, unit;
  }'
}

#----------------------------------------------------------------------------------
# Shows a pop-up message with sound. e.g.: cmd-notification hello
#----------------------------------------------------------------------------------
function cmd-notification() {
  message=""
  if [ $# -eq 0 ]; then
    message="End process"
  else
    message="$1"
  fi
  osascript -e "display notification \"$message\" sound name \"Basso\""
}

#----------------------------------------------------------------------------------
# `colima` gets the internal IP
#----------------------------------------------------------------------------------
if type colima &> /dev/null; then
  function ipc() {
    result=$(colima status 2>&1)
    ip=$(echo "$result" | awk '/address:/ {print $NF}' | tr -d '"')
    if [ -z "$ip" ]; then
      echo "$result" | awk -F 'msg=' '{print $2}' | cut -d'"' -f2
    else
      echo "$ip"
    fi
  }
fi

#----------------------------------------------------------------------------------
# Enable / Disable WiFi
#----------------------------------------------------------------------------------
function dwifi() {
  networksetup -setairportpower en0 off
}

function ewifi() {
  networksetup -setairportpower en0 on
}

#----------------------------------------------------------------------------------
# Theme switching depending on the current macOS appearance
#----------------------------------------------------------------------------------
function themeToggle() {
  if [[ "$MACOS_CURRENT_THEME" == "Light" ]]; then
    # `zsh` autosuggest highlight
    if [[ "$SHELL" = "/bin/zsh" ]]; then
      ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#9e9e9e'
    fi

    # `lsd`
    if type lsd &> /dev/null; then
      mv ~/.config/lsd_light ~/.config/lsd 2> /dev/null
    fi

    # `bat`
    if type bat &> /dev/null; then
      alias cat='/opt/homebrew/bin/bat --theme=OneHalfLight '
      alias catl='/opt/homebrew/bin/bat --theme=OneHalfLight --paging=never '
      alias bat='/opt/homebrew/bin/bat --theme=OneHalfLight '
    fi
  else
    # `lsd`
    mv ~/.config/lsd ~/.config/lsd_light 2> /dev/null
  fi
}

#----------------------------------------------------------------------------------
# Remove the last row from the history file
#----------------------------------------------------------------------------------
function rr\!() {
  if [[ "$SHELL" == *"zsh"* ]]; then
    FILENAME="$HOME/.zsh_history"
  elif [[ "$SHELL" == *"bash"* ]]; then
    FILENAME="$HOME/.bash_history"
  else
    echo ":: I don't know which Shell you're using!"
    return
  fi

  nloop=${1:-2}

  echo $FILENAME

  if ! [[ "$nloop" =~ ^[0-9]+$ ]]; then
    echo ":: Please, enter a valid number"
    return
  fi

  for i in $(seq 1 "$nloop"); do
    if [[ "$(uname)" == "Darwin" ]]; then
      sed -i '' -e '$d' $FILENAME
    else
      sed -i -e '$d' $FILENAME
    fi
  done
}
