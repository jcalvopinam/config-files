#!/usr/bin/env bash
# Functions

#----------------------------------------------------------------------------------
# Git
#----------------------------------------------------------------------------------
prompt_git() {
	local s='';
	local branchName='';

	# Checks if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# checks if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensures the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Checks for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Checks for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Checks for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Checks for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Gets the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		# PS1 defaulf
		# echo -e "${1}${branchName}${2}${s}";
		# PS1 custom git
		echo -e "${1}(${branchName}${s}) ${2}";
	else
		return;
	fi;
}

# Uses Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Gets the name of the parent branch
function git_parent() {
	git show-branch -a \
	| grep '\*' \
	| grep -v `git rev-parse --abbrev-ref HEAD` \
	| head -n1 \
	| sed 's/.*\[\(.*\)\].*/\1/' \
	| sed 's/[\^~].*//'
}

#----------------------------------------------------------------------------------
# Creates a new directory and enter it
#----------------------------------------------------------------------------------
function mkd() {
	mkdir -p "$@" && cd "$_";
}


#----------------------------------------------------------------------------------
# Determine size of a file or total size of a directory
#----------------------------------------------------------------------------------
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}


#----------------------------------------------------------------------------------
# Runs `dig` and display the most useful info
#----------------------------------------------------------------------------------
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}


#----------------------------------------------------------------------------------
# UTF-8-encode a string of Unicode symbols
#----------------------------------------------------------------------------------
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}


#----------------------------------------------------------------------------------
# `showtree` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
#----------------------------------------------------------------------------------
function showtree() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


#----------------------------------------------------------------------------------
# Extract and open project with IntelliJ, currently this only supports "zip" files.
#                    The command uio means Unzip Intellij Open
# Keep in mind that the "idea" command must be enabled, if you aren't sure, please
# open IntelliJ and go to "Tools > Create Command-line Launcher..." and hit "OK"
# sample how to use: uio project-name.zip
# > uio demo.zip
#----------------------------------------------------------------------------------
function uio() {
    project=$1
    filename=$(basename -- "$project")
    extension="${filename##*.}"
    filename="${filename%.*}"

    if [ "$project" = "" ]; then
        echo " ::Please enter the file name..."
    else
        if [[ ${extension} == "zip" ]]; then
            unzip -q $project
            echo " ::Checking the project structure ..."
            cd $filename
            if [ -e pom.xml ] || [ -e build.gradle ]; then
                echo " ::Opening the project" $filename
                cd ..
                idea $filename & 
                sleep 5
                echo " "
            else
                cd ..
                rm -rf $filename
                echo " ::The structure of the project is not maven nor gradle"
            fi
        else
            echo " :: Extension file doesn't support...."
        fi
    fi
}
