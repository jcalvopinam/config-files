#!/usr/bin/env bash
# Functions

#----------------------------------------------------------------------------------
# Some functions were adapted from: https://github.com/junegunn/fzf-git.sh
# MIT License
#----------------------------------------------------------------------------------
if [[ $# -eq 1 ]]; then
  branches() {
    git branch "$@" --sort=-committerdate --sort=-HEAD --format=$'%(HEAD) %(color:yellow)%(refname:short) %(color:green)(%(committerdate:relative))\t%(color:blue)%(subject)%(color:reset)' --color=always | column -ts$'\t'
  }
  bswitch() {
    git branch | grep -v '/HEAD\s' | grep -v "*" | awk -F' ' {'print $1'}
  }
  case "$1" in
    branches)
      echo $'ESC (exit) ╱ ALT-A (show all branches)\n'
      branches
      ;;
    bswitch)
      echo $'ENTER (switch) ╱ ESC (exit) ╱ ALT-A (show all branches)\n'
      bswitch
      ;;
    all-branches)
      echo $'ESC (exit)\n'
      branches -a
      ;;
    nobeep) ;;
    *) exit 1 ;;
  esac
elif [[ $# -gt 1 ]]; then
  set -e

  branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
  if [[ $branch = HEAD ]]; then
    branch=$(git describe --exact-match --tags 2> /dev/null || git rev-parse --short HEAD)
  fi

  exit 0
fi

__fzf_git=${BASH_SOURCE[0]:-${(%):-%x}}
__fzf_git=$(readlink -f "$__fzf_git" 2> /dev/null || /usr/bin/ruby --disable-gems -e 'puts File.expand_path(ARGV.first)' "$__fzf_git" 2> /dev/null)


#----------------------------------------------------------------------------------
# Internal functions
#----------------------------------------------------------------------------------
_git_fzf() {
  fzf-tmux -p80%,60% -- \
    --layout=reverse --multi --height=50% --min-height=20 --border \
    --color='header:italic:underline' \
    --preview-window='right,50%,border-left' \
    --bind='ctrl-/:change-preview-window(down,50%,border-top|hidden|)' "$@"
}

_git_check() {
  git rev-parse HEAD > /dev/null 2>&1 && return

  [[ -n $TMUX ]] && tmux display-message "Not in a git repository"
  return 1
}


#----------------------------------------------------------------------------------
# Shows git tree
#----------------------------------------------------------------------------------
function gtree() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}


#----------------------------------------------------------------------------------
# Gets the name of the parent branch
#----------------------------------------------------------------------------------
function gparent() {
    git show-branch \
    | grep '\*' \
    | grep -v `git rev-parse --abbrev-ref HEAD` \
    | head -n1 \
    | sed 's/.*\[\(.*\)\].*/\1/' \
    | sed 's/[\^~].*//'
}


#----------------------------------------------------------------------------------
# Shows git diff
#----------------------------------------------------------------------------------
function gdiff() {
    git diff $@ --name-only | \
    fzf -m -e --ansi \
        --prompt '📁 Search files: ' \
        --header $'ESC (exit) ╱ ENTER (open in editor)\n\n' \
        --preview-window right:70%,wrap \
        --layout reverse \
        --border \
        --preview "git diff $@  --abbrev --color=always  -- {-1}" | xargs nvim
}


#----------------------------------------------------------------------------------
# Shows git log
#----------------------------------------------------------------------------------
function glogg() {
    git log $@ --abbrev --oneline --decorate --color --abbrev-commit \
    --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)(%an)%Creset" | \
    fzf -m -e --ansi \
        --prompt '☘️ Search by hash, message or author: ' \
        --header $'ESC (exit)\n\n' \
        --preview-window right:70%,wrap \
        --tiebreak begin \
        --color hl:underline,hl+:underline \
        --layout reverse \
        --border \
        --preview "git show {1} --color=always --abbrev --show-signature " | awk -F' ' {'print $1'} | pbcopy
}


#----------------------------------------------------------------------------------
# Shows git branches
#----------------------------------------------------------------------------------
function gbranch() {
    _git_check || return
    bash "$__fzf_git" branches |
    fzf -m -e --ansi \
        --prompt ' Search branch: ' \
        --header-lines 2 \
        --preview-window down,border-top,75% \
        --tiebreak begin \
        --color hl:underline,hl+:underline \
        --layout reverse \
        --border \
        --bind 'ctrl-/:change-preview-window(down,70%|hidden|)' \
        --bind "ctrl-o:execute-silent:bash $__fzf_git branch {}" \
        --bind "alt-a:change-prompt( All branches> )+reload:bash \"$__fzf_git\" all-branches" \
        --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' "$@" |
        sed 's/^..//' | cut -d' ' -f1 | pbcopy
}


#----------------------------------------------------------------------------------
# Shows git branches and switch it
#----------------------------------------------------------------------------------
function gswitch() {
    currentBranch=("Current branch:" $(git branch 2> /dev/null | sed -n -e 's/^\* \(.*\)/[\1]/p'))
    _git_check || return
    bash "$__fzf_git" bswitch |
    fzf -e --ansi \
        --prompt ' Search branch to switch: ' \
        --header "$currentBranch " \
        --header-lines 2 \
        --preview-window down,border-top,40% \
        --tiebreak begin \
        --color hl:underline,hl+:underline \
        --layout reverse \
        --border \
        --bind "alt-a:change-prompt( All branches> )+reload:bash \"$__fzf_git\" all-branches" |
        xargs git switch; git pull
}


#----------------------------------------------------------------------------------
# Shows git tags
#----------------------------------------------------------------------------------
function gtag() {
    _git_check || return
    git tag --sort -version:refname |
    fzf -m -e --ansi \
        --prompt '📛 Search tag: ' \
        --header $'ESC (exit)\n\n' \
        --preview-window right,70% \
        --tiebreak begin \
        --color hl:underline,hl+:underline \
        --layout reverse \
        --border \
        --preview 'git show --color=always {}' "$@" | pbcopy
}


#----------------------------------------------------------------------------------
# Shows git stashes
#----------------------------------------------------------------------------------
function gstash() {
    _git_check || return
    git stash list | \
    fzf -m -e --ansi -d: \
        --prompt '🥡 Search stash: ' \
        --header $'ESC (exit) ╱ CTRL-X (drop stash)\n\n' \
        --preview-window right,70% \
        --tiebreak begin \
        --color hl:underline,hl+:underline \
        --layout reverse \
        --border \
        --bind 'ctrl-x:execute-silent(git stash drop {1})+reload(git stash list)' \
        --preview 'git show --color=always {1}' "$@" | cut -d: -f1
}


#----------------------------------------------------------------------------------
# Shows git status
#----------------------------------------------------------------------------------
function gstatus() {
    git status -s | awk '{print $2 " " $1}'| \
    fzf -m -e --ansi \
        --prompt '📁 Search file: ' \
        --header $'ESC (exit) ╱ CTRL-J (down) ╱ CTRL-K (up) \n\n' \
        --preview-window right,70% \
        --tiebreak begin \
        --color hl:underline,hl+:underline \
        --layout reverse \
        --border \
        --bind=ctrl-j:preview-down \
        --bind=ctrl-k:preview-up \
        --preview 'git diff --color=always {+1}' | xargs nvim
}


#----------------------------------------------------------------------------------
# Creates a new folder and enter it
#----------------------------------------------------------------------------------
function mkd() {
    mkdir -p "$@" && cd "$_";
}


#----------------------------------------------------------------------------------
# Deletes file/folder with scrub utility
#----------------------------------------------------------------------------------
function rmk() {
    scrub -p dod $1
    shred -zun 10 -v $1
}


#----------------------------------------------------------------------------------
# Gets the size of a file or total size of a directory
#----------------------------------------------------------------------------------
function file-size() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}


#----------------------------------------------------------------------------------
# Gets the most useful info
#----------------------------------------------------------------------------------
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}


#----------------------------------------------------------------------------------
# UTF-8-encode a string of Unicode symbols
#----------------------------------------------------------------------------------
function utf8() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}


#----------------------------------------------------------------------------------
# Extract and open project with IntelliJ, currently this only supports "zip" files.
#                    The command uio means Unzip Intellij Open
# Keep in mind that the "idea" command must be enabled, if you aren't sure, please
# open IntelliJ and go to "Tools > Create Command-line Launcher..." and hit "OK"
# sample how to use: uio project-name.zip
# > uio demo.zip
#----------------------------------------------------------------------------------
function uio() {
    project=$1
    filename=$(basename -- "$project")
    extension="${filename##*.}"
    filename="${filename%.*}"

    if [ "$project" = "" ]; then
        echo " ::Please enter the file name..."
    else
        if [[ ${extension} == "zip" ]]; then
            unzip -q $project
            echo " ::Checking the project structure ..."
            cd $filename
            if [ -e pom.xml ] || [ -e build.gradle ]; then
                echo " ::Opening the project" $filename
                cd ..
                idea $filename & 
                sleep 5
                echo " "
            else
                cd ..
                rm -rf $filename
                echo " ::The structure of the project is not maven nor gradle"
            fi
        else
            echo " :: Extension file doesn't support...."
        fi
    fi
}


#----------------------------------------------------------------------------------
# Set 'man' colors
#----------------------------------------------------------------------------------
function man() {
    env \
    LESS_TERMCAP_mb=$'\e[01;31m' \
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    man "$@"
}


#----------------------------------------------------------------------------------
# Finds files inside of the current path
#----------------------------------------------------------------------------------
function ff() {
    local rgfilter=" rg --files --follow --no-ignore-vcs --hidden -g '!{*/Library/*,.photoslibrary/*,node_modules/*,.git/*,**/build/*}' "
    fzf -m -e --ansi \
        --prompt '📁 Search file: ' \
        --header $'Press <ENTER> to edit / <ESC> to exit.\n\n' \
        --preview-window right,60% \
        --tiebreak begin \
        --color hl:underline,hl+:underline \
        --layout reverse \
        --border \
        --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file ||
            (bat --style=numbers --color=always {} || highlight -O ansi -l {} ||
                coderay {} || rougify {} || cat {}) 2> /dev/null | head -500' | xargs nvim
}


#----------------------------------------------------------------------------------
# Finds folders inside of the current path
#----------------------------------------------------------------------------------
function fd() {
    cmd="command find -L . -mindepth 1 \
    \\( -path '*/\\.*' -o -fstype 'sysfs' -o -fstype 'devfs' -o -fstype 'devtmpfs' \
    -o -fstype 'proc' -o -name 'node_modules' -o -name 'build' -o -name 'Library' \
    -o -name '*.photoslibrary' -o -name 'classes' \\) \
    -prune -o -type d -print 2> /dev/null | cut -b3-"

    cd $(eval "$cmd" | \
        fzf -e --ansi \
            --prompt '📁 Search folder: ' \
            --header $'ESC (exit)\n\n' \
            --layout reverse \
            --border)
}


#----------------------------------------------------------------------------------
# Clean duplicated entries
#----------------------------------------------------------------------------------
function czsh() {
    cd ~
    cat -n .zsh_history | sort -t ';' -uk2 | sort -nk1 | cut -f2- > .zsh_clean_history
    rm -rf .zsh_history .zcompdump* .zsh_sessions
    mv .zsh_clean_history .zsh_history
    cd -
}
