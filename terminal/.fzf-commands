#!/usr/bin/env bash

exclude=$(awk '{printf " -o -name '\''%s'\''", $1}' $HOME/.fzf-ignore)


#----------------------------------------------------------------------------------
# Some functions were adapted from: https://github.com/junegunn/fzf-git.sh
# MIT License
#----------------------------------------------------------------------------------
if [[ $# -eq 1 ]]; then
  branches() {
    git branch "$@" --sort=-committerdate --sort=-HEAD --format=$'%(HEAD) %(color:yellow)%(refname:short) %(color:green)(%(committerdate:relative))\t%(color:blue)%(subject)%(color:reset)' --color=always | column -ts$'\t'
  }
  bswitch() {
    git branch | grep -v '/HEAD\s' | grep -v "*" | awk -F' ' {'print $1'}
  }
  case "$1" in
    branches)
      echo $' ESC (exit) | ENTER (search within the log of the selected branch) | ALT-A (show all branches)'
      branches
      ;;
    bswitch)
      echo $' ESC (exit) | ENTER (switch to the branch selected)'
      bswitch
      ;;
    all-branches)
      echo $' ESC (exit)\n'
      branches -a
      ;;
    nobeep) ;;
    *) exit 1 ;;
  esac
elif [[ $# -gt 1 ]]; then
  set -e

  branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
  if [[ $branch = HEAD ]]; then
    branch=$(git describe --exact-match --tags 2> /dev/null || git rev-parse --short HEAD)
  fi

  exit 0
fi

__fzf_git=${BASH_SOURCE[0]:-${(%):-%x}}
__fzf_git=$(readlink -f "$__fzf_git" 2> /dev/null || /usr/bin/ruby --disable-gems -e 'puts File.expand_path(ARGV.first)' "$__fzf_git" 2> /dev/null)


#----------------------------------------------------------------------------------
# Internal functions
#----------------------------------------------------------------------------------
_git_fzf-tmux() {
  fzf-tmux -p80%,60% -- \
    --layout=reverse --multi --height=50% --min-height=20 --border \
    --color='header:italic:underline' \
    --preview-window='right,50%,border-left' \
    --bind='ctrl-/:change-preview-window(down,50%,border-top|hidden|)' "$@"
}

_git_fzf() {
  fzf --ansi \
    --style full \
    --prompt '❯ ' \
    --border --padding 1,0 \
    --input-label ' 󰍉 Search ' --header-label '  Info ' \
    --bind 'focus:transform-preview-label:[[ -n {} ]] && printf " 󰍉 Previewing [%s] " {}' \
    --bind 'focus:+transform-header:echo " ESC (exit)"' \
    --bind 'ctrl-/:change-preview-window(down,border-top,75%|right,70%,wrap)' \
    --bind '?:toggle-preview+change-preview-window(hidden|right:70%,wrap)' \
    --tiebreak begin \
    --layout reverse \
    --color hl:underline,hl+:underline \
    --color 'border:#aaaaaa,label:#cccccc' \
    --color 'preview-border:#9999cc,preview-label:#ccccff' \
    --color 'list-border:#669966,list-label:#99cc99' \
    --color 'input-border:#996666,input-label:#ffcccc' \
    --color 'header-border:#6699cc,header-label:#99ccff' "$@"
}


_git_fzf_preview() {
  _git_fzf --preview-window right:70% "$@"
}

_git_check() {
  git rev-parse --is-inside-work-tree > /dev/null 2>&1 && return

  msg="Not in a git repository"
  if command -v tmux > /dev/null 2>&1 && [[ -n $TMUX ]]; then
    tmux display-message "$msg"
  else
    echo "$msg"
  fi

  return 1
}


#----------------------------------------------------------------------------------
# Shows git diff
#----------------------------------------------------------------------------------
function gdiff() {
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo $'Git project not found\n'
    return ;
  fi

  local modified_files=$(git diff --name-only)
  [ -z "$modified_files" ] && echo "No files modified" && return

  echo "$modified_files" | \
  _git_fzf_preview --border-label ' 󰕜 gdiff ' --list-label '  Files ' \
    --bind 'focus:+transform-header:
        out=$(file --brief {} 2>/dev/null)
        if [[ -n "$out" ]]; then
          echo -e "$out\n ESC (exit)"
        else
          echo -e "No file selected"
        fi' \
    --preview "echo \"\"; git -C \"\$(git rev-parse --show-toplevel)\" diff --color=always {} | bat --color=always --style=changes --line-range :700 | less -R" | \
    xargs -o -I {} git diff -p {}
}


#----------------------------------------------------------------------------------
# Shows git log
#----------------------------------------------------------------------------------
function glog1() {
  _git_check || return
  git log --date-order --abbrev --oneline --decorate --color --abbrev-commit \
  --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)(%an)%Creset" | sed 's/Merged in //' $@ | \
  _git_fzf_preview -e \
    --header $'Search by hash/message/author\n ESC (exit)' \
    --border-label '  glog1 ' --list-label '  Commits '\
    --bind 'focus:transform-preview-label:printf " 󰍉 Previewing commits "' \
    --bind "enter:execute-silent(git show {1} --pretty=format:'%H' --no-patch | tr -d '\n' | pbcopy)" \
    --preview "git show {1} --color=always --abbrev --show-signature "
}


#----------------------------------------------------------------------------------
# Shows git log only files
#----------------------------------------------------------------------------------
function glog2() {
  _git_check || return
  git log --date-order --abbrev --oneline --decorate --color --abbrev-commit \
  --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)(%an)%Creset" | sed 's/Merged in //' $@ | \
  _git_fzf_preview -e \
    --header $'Search by hash/message/author\n ESC (exit)' \
    --border-label '  glog1 ' --list-label '  Commits '\
    --bind 'focus:transform-preview-label:printf " 󰍉 Previewing commits "' \
    --bind "enter:execute-silent(git show {1} --pretty=format:'%H' --no-patch | tr -d '\n' | pbcopy)" \
    --preview "git show --name-only {1} --color=always --abbrev --show-signature "
}


#----------------------------------------------------------------------------------
# Shows git branches
#----------------------------------------------------------------------------------
function gbranch() {
  _git_check || return
  bash "$__fzf_git" branches |
  _git_fzf -e \
    --header-lines 1 \
    --border-label '  gbranch ' --list-label '  Branches ' \
    --bind 'focus:transform-preview-label:printf " 󰍉 Previewing commits "' \
    --bind "enter:execute:git log --oneline --graph --date=short --color=always --pretty='format:%C(auto)%cd %h%d %s' $(sed s/^..// <<< {}) | less -R" \
    --bind "alt-b:change-list-label( Branches> )+reload:bash \"$__fzf_git\" branches" \
    --bind "alt-a:change-list-label( All branches> )+reload:bash \"$__fzf_git\" all-branches" \
    --bind "ctrl-c:execute-silent(git show {1} --pretty=format:'%H' --no-patch | tr -d '\n' | pbcopy)" \
    --preview-window down,border-top,70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' "$@" |
    sed 's/^..//' | cut -d' ' -f1 | pbcopy
}


#----------------------------------------------------------------------------------
# Shows git branches and switch it
#----------------------------------------------------------------------------------
function gswitch() {
  _git_check || return
  currentBranch=("Current branch:" $(git branch 2>/dev/null | sed -n -e 's/^\* \(.*\)/\1/p'))
  selection=$(bash "$__fzf_git" bswitch |
    _git_fzf -e \
      --header "$currentBranch " \
      --header-lines 1 \
      --border-label '  gswitch ' --list-label '  Branches ' \
      --bind 'focus:transform-preview-label:printf ""')

  if [[ -z "$selection" ]]; then
    return
  fi

  git switch "$selection" && git pull
}


#----------------------------------------------------------------------------------
# Shows git tags
#----------------------------------------------------------------------------------
function gtag() {
  _git_check || return
  selection=$(git tag --sort -version:refname |
    _git_fzf_preview -e \
      --border-label '  gtag ' --list-label '  Tags ' \
      --preview 'git show --color=always {}' "$@")

  if [[ -z "$selection" ]]; then
    return
  fi

  git checkout "$selection"
}


#----------------------------------------------------------------------------------
# Shows git stashes
#----------------------------------------------------------------------------------
function gstash() {
  _git_check || return
  git stash list | \
  _git_fzf_preview -e -d: \
    --header $' ESC (exit) | CTRL-X (drop stash)\n' \
    --border-label ' 󱐖 gstash ' --list-label '  Stashes ' \
    --bind 'focus:transform-preview-label:printf " 󰍉 Previewing commits "' \
    --bind 'ctrl-x:execute-silent(git stash drop {1})+reload(git stash list)' \
    --preview 'git show --color=always {1}' "$@" | cut -d: -f1
}


#----------------------------------------------------------------------------------
# Shows git status
#----------------------------------------------------------------------------------
function gstatus() {
  _git_check || return
  git status -s | awk '{print $2 " " $1}'| \
  _git_fzf_preview -e \
    --border-label '  gstatus ' --list-label '  Files ' \
    --preview '
        file={+1}
        if git status --short -- "$file" | grep -q "^??"; then
          bat --color=always -- "$file" 2>/dev/null || cat "$file"
        else
          git diff --color=always -- "$file"
        fi
      '
}


#----------------------------------------------------------------------------------
# Gets the name of the parent branch
#----------------------------------------------------------------------------------
function gparent() {
  _git_check || return
  git show-branch \
  | grep '\*' \
  | grep -v `git rev-parse --abbrev-ref HEAD` \
  | head -n1 \
  | sed 's/.*\[\(.*\)\].*/\1/' \
  | sed 's/[\^~].*//'
}


#----------------------------------------------------------------------------------
# Finds all tracked files with git
#----------------------------------------------------------------------------------
function gls() {
  git ls-files | fzf --style full \
    --border --padding 1,2 \
    --border-label ' Files tracked with git ' --input-label '  Search ' --header-label ' File Type ' \
    --preview 'fzf-preview.sh {}' \
    --bind 'result:transform-list-label:
        if [[ -z $FZF_QUERY ]]; then
          echo " $FZF_MATCH_COUNT items "
        else
          echo " $FZF_MATCH_COUNT matches for [$FZF_QUERY] "
        fi
        ' \
    --bind 'focus:transform-preview-label:[[ -n {} ]] && printf " 󰍉 Previewing [%s] " {}' \
    --bind 'focus:+transform-header:file --brief {} || echo "No file selected"' \
    --bind 'ctrl-r:change-list-label( Reloading the list )+reload(sleep 2; git ls-files)' \
    --color 'border:#aaaaaa,label:#cccccc' \
    --color 'preview-border:#9999cc,preview-label:#ccccff' \
    --color 'list-border:#669966,list-label:#99cc99' \
    --color 'input-border:#996666,input-label:#ffcccc' \
    --color 'header-border:#6699cc,header-label:#99ccff'
}


#----------------------------------------------------------------------------------
# Finds files inside of the current path
#----------------------------------------------------------------------------------
function ff() {
  filter="${1:-""}"
  ignore_file="$HOME/.fzf-ignore"
  exclude_flags=""

  if [ -f "$ignore_file" ]; then
    exclude_flags=$(cat "$ignore_file" | tr '\n' ' ')
  fi

  files=$(eval "find . -type f -maxdepth 5 $exclude_flags 2>/dev/null")

  selected_file=$(echo "$files" | \
    _git_fzf_preview -e \
    --border-label '  ff ' --input-label '  Search file ' \
    --header $' ESC (exit)' \
    --preview '[[ $(file --mime {}) =~ binary ]] && file --brief {} ||
        (bat --style=numbers --color=always {} || highlight -O ansi -l {} ||
        coderay {} || rougify {} || cat {}) 2> /dev/null | head -500' \
    --query "$filter")

  if [ -n "$selected_file" ]; then
    if file --mime-type "$selected_file" | grep -q 'text/'; then
      nvim "$selected_file"
    else
      open "$selected_file"
    fi
  fi  
}


#----------------------------------------------------------------------------------
# Finds folders inside of the current path
#----------------------------------------------------------------------------------
function fd() {
  filter="${1:-""}"
  ignore_file="$HOME/.fzf-ignore"
  exclude_flags=""

  if [ -f "$ignore_file" ]; then
    exclude_flags=$(cat "$ignore_file" | tr '\n' ' ')
  fi

  cmd="command find -L . -mindepth 1 \\( -path '\\.' $exclude_flags 2>/dev/null \\) -prune -o -type d -print 2> /dev/null | cut -b3-"
  selected_dir=$(eval "$cmd" | \
      _git_fzf_preview -e \
        --border-label '  fd ' --input-label '  Search folder ' \
        --bind 'focus:+transform-header:
          out=$(file --brief {} 2>/dev/null)
          if [[ -n "$out" ]]; then
            echo -e "$out\n ESC (exit)"
          else
            echo -e "No file selected"
          fi' \
        --preview 'ls {}' \
        --bind 'ctrl-r:change-list-label( Reloading the list )+reload(sleep 2; ls)')

  if [[ -n "$selected_dir" ]]; then
    cd "$selected_dir"
  fi
}

#----------------------------------------------------------------------------------
# Finds files and folders inside of the current path
#----------------------------------------------------------------------------------
function lsf(){
  if type lsd &> /dev/null && type bat &> /dev/null; then
    dir_command="lsd --color=always -1 -a --group-directories-first --classify"
    file_command="bat --style=numbers --color=always"
  else
    dir_command="ls -1 -a -F -G"
    file_command="cat"
  fi

  preview_command='
    if [ -d {} ]; then
      echo " $(file --brief {})\n"
      '$dir_command' {}
      echo
    else
      echo " file: $(file --brief {}) \n"
      '$file_command' {} || cat {}
      echo
    fi'

  while true; do
    selected=$(eval "$dir_command" | grep -Evf "$HOME/.fzf-ignore" | sort | \
      _git_fzf_preview -e -d: \
        --header $' ESC (exit)\n\n' \
        --preview "$preview_command" \
        --bind "ctrl-l:execute-silent(cd \"{}\"; lsf)")

    if [ -z "$selected" ]; then
      break
    elif [ "$selected" = "." ]; then
      cd ..
    elif [ -d "$selected" ]; then
      cd "$selected" || exit 1
    elif file --mime-type "$selected" | grep -qE 'text|ascii'; then
      nvim "$selected"
    fi
  done
}