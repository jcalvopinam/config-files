#!/usr/bin/env bash

exclude=$(awk '{printf " -o -name '\''%s'\''", $1}' $HOME/.fzf-ignore)


#----------------------------------------------------------------------------------
# Some functions were adapted from: https://github.com/junegunn/fzf-git.sh
# MIT License
#----------------------------------------------------------------------------------
if [[ $# -eq 1 ]]; then
  branches() {
    git branch "$@" --sort=-committerdate --sort=-HEAD --format=$'%(HEAD) %(color:yellow)%(refname:short) %(color:green)(%(committerdate:relative))\t%(color:blue)%(subject)%(color:reset)' --color=always | column -ts$'\t'
  }
  bswitch() {
    git branch | grep -v '/HEAD\s' | grep -v "*" | awk -F' ' {'print $1'}
  }
  case "$1" in
    branches)
      echo $'ESC (exit) ╱ ALT-A (show all branches)\n'
      branches
      ;;
    bswitch)
      echo $'ENTER (switch) ╱ ESC (exit) ╱ ALT-A (show all branches)\n'
      bswitch
      ;;
    all-branches)
      echo $'ESC (exit)\n'
      branches -a
      ;;
    nobeep) ;;
    *) exit 1 ;;
  esac
elif [[ $# -gt 1 ]]; then
  set -e

  branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
  if [[ $branch = HEAD ]]; then
    branch=$(git describe --exact-match --tags 2> /dev/null || git rev-parse --short HEAD)
  fi

  exit 0
fi

__fzf_git=${BASH_SOURCE[0]:-${(%):-%x}}
__fzf_git=$(readlink -f "$__fzf_git" 2> /dev/null || /usr/bin/ruby --disable-gems -e 'puts File.expand_path(ARGV.first)' "$__fzf_git" 2> /dev/null)


#----------------------------------------------------------------------------------
# Internal functions
#----------------------------------------------------------------------------------
_git_fzf() {
  fzf-tmux -p80%,60% -- \
    --layout=reverse --multi --height=50% --min-height=20 --border \
    --color='header:italic:underline' \
    --preview-window='right,50%,border-left' \
    --bind='ctrl-/:change-preview-window(down,50%,border-top|hidden|)' "$@"
}

_git_check() {
  git rev-parse HEAD > /dev/null 2>&1 && return

  [[ -n $TMUX ]] && tmux display-message "Not in a git repository"
  return 1
}


#----------------------------------------------------------------------------------
# Shows git diff
#----------------------------------------------------------------------------------
function gdiff() {
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo $'Git project not found\n'
    return
  fi

  # Obtener la lista de archivos modificados
  local modified_files=$(git diff --name-only)

  # Si no hay archivos modificados, salir
  [ -z "$modified_files" ] && echo "No files modified" && return

  # Utilizar fzf con la opción --preview para mostrar la lista y las diferencias
  echo "$modified_files" | \
  fzf -m --ansi \
    --prompt ' Search files: ' \
    --header $'ESC (exit)\n\n' \
    --preview-window right:70%,wrap \
    --tiebreak begin \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --preview "git -C \"\$(git rev-parse --show-toplevel)\" diff --color=always {} | bat --color=always --style=header,grid --line-range :500 | less -R" | \
    xargs -o -I {} git diff -p {}
}


#----------------------------------------------------------------------------------
# Shows git log
#----------------------------------------------------------------------------------
function glog1() {
  if ! git ls-files >& /dev/null; then
    echo $'Git project not found\n'
    return ;
  fi
  git log --date-order --abbrev --oneline --decorate --color --abbrev-commit \
  --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)(%an)%Creset" | sed 's/Merged in //' $@ | \
  fzf -m -e --ansi \
    --prompt ' Search (hash/message/author): ' \
    --header $'ESC (exit)\n\n' \
    --preview-window right:70%,wrap \
    --tiebreak index \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --preview "git show {1} --color=always --abbrev --show-signature " | awk -F' ' {'print $1'} | pbcopy
}


#----------------------------------------------------------------------------------
# Shows git log only files
#----------------------------------------------------------------------------------
function glogg2() {
  if ! git ls-files >& /dev/null; then
    echo $'Git project not found\n'
    return ;
  fi
  git log --date-order --abbrev --oneline --decorate --color --abbrev-commit \
  --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)(%an)%Creset" | sed 's/Merged in //' $@ | \
  fzf -m -e --ansi \
    --prompt ' Search (hash/message/author): ' \
    --header $'ESC (exit)\n\n' \
    --preview-window right:70%,wrap \
    --tiebreak index \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --preview "git show --name-only {1} --color=always --abbrev --show-signature " | awk -F' ' {'print $1'} | pbcopy
}


#----------------------------------------------------------------------------------
# Shows git branches
#----------------------------------------------------------------------------------
function gbranch() {
  if ! git ls-files >& /dev/null; then
    echo $'Git project not found\n'
    return ;
  fi
  _git_check || return
  bash "$__fzf_git" branches |
  fzf -m -e --ansi \
    --prompt ' Search branch: ' \
    --header-lines 2 \
    --preview-window down,border-top,75% \
    --tiebreak begin \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --bind 'ctrl-/:change-preview-window(down,70%|hidden|)' \
    --bind "ctrl-o:execute-silent:bash $__fzf_git branch {}" \
    --bind "alt-a:change-prompt( All branches> )+reload:bash \"$__fzf_git\" all-branches" \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' "$@" |
    sed 's/^..//' | cut -d' ' -f1 | pbcopy
}


#----------------------------------------------------------------------------------
# Shows git branches and switch it
#----------------------------------------------------------------------------------
function gswitch() {
  if ! git ls-files >& /dev/null; then
    echo $'Git project not found\n'
    return ;
  fi
  currentBranch=("Current branch:" $(git branch 2> /dev/null | sed -n -e 's/^\* \(.*\)/[\1]/p'))
  _git_check || return
  bash "$__fzf_git" bswitch |
  fzf -e --ansi \
    --prompt ' Search branch to switch: ' \
    --header "$currentBranch " \
    --header-lines 2 \
    --preview-window down,border-top,40% \
    --tiebreak begin \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --bind "alt-a:change-prompt( All branches> )+reload:bash \"$__fzf_git\" all-branches" |
    xargs git switch; git pull
}


#----------------------------------------------------------------------------------
# Shows git tags
#----------------------------------------------------------------------------------
function gtag() {
  if ! git ls-files >& /dev/null; then
    echo $'Git project not found\n'
    return ;
  fi
  _git_check || return
  git tag --sort -version:refname |
  fzf -m -e --ansi \
    --prompt ' Search tag: ' \
    --header $'ESC (exit)\n\n' \
    --preview-window right,70% \
    --tiebreak begin \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --preview 'git show --color=always {}' "$@" | pbcopy
}


#----------------------------------------------------------------------------------
# Shows git stashes
#----------------------------------------------------------------------------------
function gstash() {
  if ! git ls-files >& /dev/null; then
    echo $'Git project not found\n'
    return ;
  fi
  _git_check || return
  git stash list | \
  fzf -m -e --ansi -d: \
    --prompt ' Search stash: ' \
    --header $'ESC (exit) ╱ CTRL-X (drop stash)\n\n' \
    --preview-window right,70% \
    --tiebreak begin \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --bind 'ctrl-x:execute-silent(git stash drop {1})+reload(git stash list)' \
    --preview 'git show --color=always {1}' "$@" | cut -d: -f1
}


#----------------------------------------------------------------------------------
# Shows git status
#----------------------------------------------------------------------------------
function gstatus() {
  if ! git ls-files >& /dev/null; then
    echo $'Git project not found\n'
    return ;
  fi
  git status -s | awk '{print $2 " " $1}'| \
  fzf -m -e --ansi \
    --prompt ' Search file: ' \
    --header $'ESC (exit) ╱ CTRL-J (down) ╱ CTRL-K (up) \n\n' \
    --preview-window right,70% \
    --tiebreak begin \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --bind=ctrl-j:preview-down \
    --bind=ctrl-k:preview-up \
    --preview 'git diff --color=always {+1}' | xargs nvim -p
}


#----------------------------------------------------------------------------------
# Gets the name of the parent branch
#----------------------------------------------------------------------------------
function gparent() {
  if ! git ls-files >& /dev/null; then
    echo $'Git project not found\n'
    return ;
  fi
  git show-branch \
  | grep '\*' \
  | grep -v `git rev-parse --abbrev-ref HEAD` \
  | head -n1 \
  | sed 's/.*\[\(.*\)\].*/\1/' \
  | sed 's/[\^~].*//'
}


#----------------------------------------------------------------------------------
# Finds files inside of the current path
#----------------------------------------------------------------------------------
function ff() {
  filter="${1:-""}"
  ignore_file="$HOME/.fzf-ignore"
  exclude_flags=""

  if [ -f "$ignore_file" ]; then
    exclude_flags=$(cat "$ignore_file" | tr '\n' ' ')
  fi

  files=$(eval "find . -type f -maxdepth 5 $exclude_flags 2>/dev/null")

  selected_file=$(echo "$files" | fzf -m -e --ansi \
    --prompt ' Search file: ' \
    --header $'Press <ENTER> to edit / <ESC> to exit.\n\n' \
    --preview-window right,60% \
    --bind='ctrl-space:toggle-preview' \
    --tiebreak begin \
    --color hl:underline,hl+:underline \
    --layout reverse \
    --border \
    --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file ||
        (bat --style=numbers --color=always {} || highlight -O ansi -l {} ||
        coderay {} || rougify {} || cat {}) 2> /dev/null | head -500' \
    --query "$filter")

  if [ -n "$selected_file" ]; then
    if file --mime-type "$selected_file" | grep -q 'text/'; then
      nvim "$selected_file"
    else
      open "$selected_file"
    fi
  fi
}


#----------------------------------------------------------------------------------
# Finds folders inside of the current path
#----------------------------------------------------------------------------------
function fd() {
  cmd="command find -L . -mindepth 1 \\( -path '*/\\.*' $exclude \\) -prune -o -type d -print 2> /dev/null | cut -b3-"
    cd $(eval "$cmd" | \
      fzf -e --ansi \
        --prompt ' Search folder: ' \
        --header $'ESC (exit)\n\n' \
        --preview-window right,60% \
        --bind='ctrl-space:toggle-preview' \
        --tiebreak begin \
        --color hl:underline,hl+:underline \
        --layout reverse \
        --border \
        --preview 'ls {}')
}


#----------------------------------------------------------------------------------
# Finds files and folders inside of the current path
#----------------------------------------------------------------------------------
function lsf(){
  if type lsd &> /dev/null && type bat &> /dev/null; then
    dir_command="lsd --color=always -1 -a"
    file_command="bat --style=numbers --color=always"
  else
    dir_command="ls -1 -a"
    file_command="cat"
  fi

  preview_command='
    if [ -d {} ]; then
      echo "-------  Folder: {} \n"
      '$dir_command' {}
      echo
    else
      echo "-------   File  : {} \n"
      '$file_command' {} || cat {}
      echo
    fi'

  while true; do
    selected=$((eval $dir_command | grep -Evf $HOME/.fzf-ignore | xargs basename) \
    | sort \
    | sed 's|^./||' \
    | fzf -e --ansi -d: \
      --prompt '  Search: ' \
      --header $'ESC (exit)\n\n' \
      --preview-window right,70% \
      --tiebreak begin \
      --color hl:underline,hl+:underline \
      --layout reverse \
      --border \
      --preview "$preview_command")

    if [ -z "$selected" ]; then
        break
    elif [ "$selected" = "." ]; then
        cd ..
    elif file --mime-type "$selected_file" | grep -qE 'text|ASCII/'; then
        nvim "$selected"
    elif [ -d "$selected" ]; then
        cd "$selected" || exit 1
    fi
  done
}