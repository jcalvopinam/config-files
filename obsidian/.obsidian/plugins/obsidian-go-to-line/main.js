"use strict";var obsidian=require("obsidian");/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ function __awaiter(e,t,i,n){return new(i||(i=Promise))(function(o,s){function a(e){try{r(n.next(e))}catch(t){s(t)}}function l(e){try{r(n.throw(e))}catch(t){s(t)}}function r(e){var t;e.done?o(e.value):((t=e.value)instanceof i?t:new i(function(e){e(t)})).then(a,l)}r((n=n.apply(e,t||[])).next())})}const DEFAULT_SETTINGS={selectionSeperator:",",characterSeperator:":",keepCharacterLocation:!0,keepPrimarySelection:!0,selectHead:!0,newlineAtEndOfDoc:!1};class GoToLinePlugin extends obsidian.Plugin{onload(){return __awaiter(this,void 0,void 0,function*(){console.log("loading 'Go To Line' plugin"),this.addCommand({id:"go-to-line",name:"Go to line",editorCallback:e=>{new GotoModal(this.app,e,this).open()}}),this.addCommand({id:"go-to-line-auto",name:"Go to line with clipboard contents",editorCallback:e=>this.goToLineAuto(e)}),this.addCommand({id:"cursor-location-copy",name:"Copy cursor line number",editorCallback:e=>this.copyLineNumbers(e)}),this.addCommand({id:"cursor-location-copy-all",name:"Copy all cursor line numbers",editorCallback:e=>this.copyAllLineNumbers(e)}),yield this.loadSettings(),this.addSettingTab(new GoToLineSettingTab(this.app,this))})}onunload(){return __awaiter(this,void 0,void 0,function*(){console.log("unloading 'Go To Line' plugin")})}loadSettings(){return __awaiter(this,void 0,void 0,function*(){console.log("loading Settings"),this.settings=Object.assign({},DEFAULT_SETTINGS,(yield this.loadData()))})}saveSettings(){return __awaiter(this,void 0,void 0,function*(){console.log("saving Settings"),yield this.saveData(this.settings)})}getLocation(e){return this.settings.keepCharacterLocation?`${e.line+1}${this.settings.characterSeperator}${e.ch}`:(e.line+1).toString()}parseLocations(e){let t=e.split(this.settings.selectionSeperator),i=t.map(e=>{let t=this.parseLocation(e);return t?{anchor:t}:null});return i.filter(e=>e)}parseLocation(e){let t=e.trim();if(!t)return null;let i=t.split(this.settings.characterSeperator),n=Number(i[0].trim())-1,o=0;return(i.length>1&&(o=Number(i[1].trim())),isNaN(n)||isNaN(o))?null:{line:n,ch:o}}getCursor(e){return this.settings.selectHead?e.getCursor("head"):e.getCursor("anchor")}copyLineNumbers(e){return __awaiter(this,void 0,void 0,function*(){if(e){let t=this.getCursor(e),i=this.getLocation(t);yield navigator.clipboard.writeText(i)}})}copyAllLineNumbers(e){return __awaiter(this,void 0,void 0,function*(){if(e){let t=e.listSelections().map(e=>{let t=this.settings.selectHead?e.head:e.anchor;return{line:t.line,ch:t.ch}});if(this.settings.keepPrimarySelection){let i=this.getCursor(e),n=t.findIndex(e=>e.line==i.line&&e.ch==i.ch);t.splice(n,1),t.push(i)}let o=t.map(e=>this.getLocation(e)),s=o.join(this.settings.selectionSeperator);yield navigator.clipboard.writeText(s)}})}goToLine(e,t){return __awaiter(this,void 0,void 0,function*(){if(this.settings.newlineAtEndOfDoc){let i=e.lastLine(),n=t.find(e=>e.anchor.line>i);if(void 0!=n){let o=e.getLine(i).length;e.setSelection({line:i,ch:o}),e.exec("newlineAndIndent")}}e.setSelections(t)})}goToLineAuto(e){return __awaiter(this,void 0,void 0,function*(){let t=yield navigator.clipboard.readText(),i=this.parseLocations(t);for(let n of(i.length||new obsidian.Notice("Go To Line: Clipboard does not contain valid line information",5e3),i))if(n.anchor.line<0||n.anchor.ch<0)return new obsidian.Notice(`Cannot go to negative line or character locations: ${this.getLocation(n.anchor)}`,5e3),null;yield this.goToLine(e,i)})}}class GotoModal extends obsidian.SuggestModal{constructor(e,t,i){super(e),this.editor=t,this.plugin=i,this.modalEl.addClass("GTL-modal"),this.inputEl.placeholder=`Line Number between 1 and ${t.lineCount()}`}getSuggestions(e){if(e){let t=this.plugin.parseLocations(e);for(let i of t)if(i.anchor.line<0||i.anchor.ch<0)return this.inputEl.addClass("is-invalid"),[];return this.inputEl.removeClass("is-invalid"),[t]}return this.inputEl.removeClass("is-invalid"),[]}renderSuggestion(e,t){}onChooseSuggestion(e,t){this.plugin.goToLine(this.editor,e)}}class GoToLineSettingTab extends obsidian.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}resetComponent(e,t){let i=DEFAULT_SETTINGS[t],n=e.settingEl.parentElement.childNodes[0];console.log(`resetting '${n.innerText}' to '${i}'`);e.components[0].setValue(i),this.plugin.settings[t]=DEFAULT_SETTINGS[t]}display(){let{containerEl:e}=this;e.empty();let t=e.createDiv();t.createEl("h3",{text:"Selection Seperator"});let i=new obsidian.Setting(t).setName("String to seperate multiple curor locations.").addText(e=>{e.setValue(this.plugin.settings.selectionSeperator).onChange(e=>__awaiter(this,void 0,void 0,function*(){console.log(`changing selectionSeperator to ${e}`),this.plugin.settings.selectionSeperator=e,yield this.plugin.saveSettings()}))});new obsidian.Setting(t).setName(`Reset to default value of '${DEFAULT_SETTINGS.selectionSeperator}'`).addButton(e=>e.setButtonText("Reset").onClick(()=>__awaiter(this,void 0,void 0,function*(){this.resetComponent(i,"selectionSeperator"),yield this.plugin.saveSettings()})));let n=e.createDiv();n.createEl("h3",{text:"Character Seperator"});let o=new obsidian.Setting(n).setName("Line number and character number seperator").addText(e=>{e.setValue(this.plugin.settings.characterSeperator).onChange(e=>__awaiter(this,void 0,void 0,function*(){console.log(`changing characterSeperator to ${e}`),this.plugin.settings.characterSeperator=e,yield this.plugin.saveSettings()}))});new obsidian.Setting(n).setName(`Reset to default value of '${DEFAULT_SETTINGS.characterSeperator}'`).addButton(e=>e.setButtonText("Reset").onClick(()=>__awaiter(this,void 0,void 0,function*(){this.resetComponent(o,"characterSeperator"),yield this.plugin.saveSettings()})));let s=e.createDiv();s.createEl("h3",{text:"Keep Character Location"});let a=new obsidian.Setting(s).setName("Copy the character location of the cursor when copying.").addToggle(e=>e.setValue(null!=this.plugin.settings.keepCharacterLocation?this.plugin.settings.keepCharacterLocation:DEFAULT_SETTINGS.keepCharacterLocation).onChange(e=>__awaiter(this,void 0,void 0,function*(){this.plugin.settings.keepCharacterLocation!=e&&console.log(`changing keepCharacterLocation to ${e}`),this.plugin.settings.keepCharacterLocation=e,yield this.plugin.saveSettings()})));new obsidian.Setting(s).setName(`Reset to default value of '${DEFAULT_SETTINGS.keepCharacterLocation}'`).addButton(e=>e.setButtonText("Reset").onClick(()=>__awaiter(this,void 0,void 0,function*(){this.resetComponent(a,"keepCharacterLocation"),yield this.plugin.saveSettings()})));let l=e.createDiv();l.createEl("h3",{text:"Keep Primary Cursor on Mulitple Copy"});let r=new obsidian.Setting(l).setName("Keeps primary cursor at the end of location list when copies. 				If disabled, primary cursor will become the cursor furthest down document.").addToggle(e=>e.setValue(null!=this.plugin.settings.keepPrimarySelection?this.plugin.settings.keepPrimarySelection:DEFAULT_SETTINGS.keepPrimarySelection).onChange(e=>__awaiter(this,void 0,void 0,function*(){this.plugin.settings.keepPrimarySelection!=e&&console.log(`changing keepPrimarySelection to ${e}`),this.plugin.settings.keepPrimarySelection=e,yield this.plugin.saveSettings()})));new obsidian.Setting(l).setName(`Reset to default value of '${DEFAULT_SETTINGS.keepPrimarySelection}'`).addButton(e=>e.setButtonText("Reset").onClick(()=>__awaiter(this,void 0,void 0,function*(){this.resetComponent(r,"keepPrimarySelection"),yield this.plugin.saveSettings()})));let c=e.createDiv();c.createEl("h3",{text:"Get Head of Cursor"});let d=new obsidian.Setting(c).setName("Get the location of the head of a selection when copying line number. 				If disabled the anchor will be copied.").addToggle(e=>e.setValue(null!=this.plugin.settings.selectHead?this.plugin.settings.selectHead:DEFAULT_SETTINGS.selectHead).onChange(e=>__awaiter(this,void 0,void 0,function*(){this.plugin.settings.selectHead!=e&&console.log(`changing selectHead to ${e}`),this.plugin.settings.selectHead=e,yield this.plugin.saveSettings()})));new obsidian.Setting(c).setName(`Reset to default value of '${DEFAULT_SETTINGS.selectHead}'`).addButton(e=>e.setButtonText("Reset").onClick(()=>__awaiter(this,void 0,void 0,function*(){this.resetComponent(d,"selectHead"),yield this.plugin.saveSettings()})));let h=e.createDiv();h.createEl("h3",{text:"Create Newline At End Of Document"});let g=new obsidian.Setting(h).setName("Create a newline at the end of the document if given 				line number is past the end. Multiple lines past the end 				will only create one extra line.").addToggle(e=>e.setValue(null!=this.plugin.settings.newlineAtEndOfDoc?this.plugin.settings.newlineAtEndOfDoc:DEFAULT_SETTINGS.newlineAtEndOfDoc).onChange(e=>__awaiter(this,void 0,void 0,function*(){this.plugin.settings.newlineAtEndOfDoc!=e&&console.log(`changing newlineAtEndOfDoc to ${e}`),this.plugin.settings.newlineAtEndOfDoc=e,yield this.plugin.saveSettings()})));new obsidian.Setting(h).setName(`Reset to default value of '${DEFAULT_SETTINGS.newlineAtEndOfDoc}'`).addButton(e=>e.setButtonText("Reset").onClick(()=>__awaiter(this,void 0,void 0,function*(){this.resetComponent(g,"newlineAtEndOfDoc"),yield this.plugin.saveSettings()}))),e.createDiv().createEl("h2",{text:"Reset All Settings"});let u=[{elem:i,setting:"selectionSeperator"},{elem:o,setting:"characterSeperator"},{elem:a,setting:"keepCharacterLocation"},{elem:r,setting:"keepPrimarySelection"},{elem:d,setting:"selectHead"},{elem:g,setting:"newlineAtEndOfDoc"},],p=e.createDiv();new obsidian.Setting(p).setName("Reset all settings to default values. 				(Don't forget about the hotkeys! Just search 'Go To Line' 				to find the 3 commands.)").addButton(e=>e.setButtonText("Reset").onClick(()=>__awaiter(this,void 0,void 0,function*(){console.log("resetting all values to their defaults."),u.forEach(e=>this.resetComponent(e.elem,e.setting)),yield this.plugin.saveSettings()})))}}module.exports=GoToLinePlugin;